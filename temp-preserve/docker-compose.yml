version: '3.8'

services:
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NUXT_PUBLIC_API_BASE_URL=http://localhost/api
      - NUXT_PUBLIC_SITE_URL=http://localhost
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
      - /app/.nuxt
    networks:
      - web
    profiles:
      - dev
      - prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=4000
      - MONGODB_URI=mongodb://mongodb:27017/photographer
      - JWT_SECRET=${JWT_SECRET:-change_me}
      - JWT_EXPIRES_IN=1d
      - CORS_ORIGIN=http://localhost
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - CLOUDINARY_UPLOAD_PRESET=${CLOUDINARY_UPLOAD_PRESET}
      - RATE_LIMIT_POINTS=100
      - RATE_LIMIT_DURATION=60
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
      - /app/dist
    networks:
      - web
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - dev
      - prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=photographer
    volumes:
      - mongodb_data:/data/db
      - ./apps/backend/seed:/docker-entrypoint-initdb.d
    networks:
      - web
    profiles:
      - dev
      - prod
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - web
    profiles:
      - dev
      - prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - web
    depends_on:
      - frontend
      - backend
    profiles:
      - dev
      - prod
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
  redis_data:

networks:
  web:
    driver: bridge

